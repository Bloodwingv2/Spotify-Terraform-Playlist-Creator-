name: Deploy Spotify Terraform

on:
  push:
    branches:
      - main  # Runs only on the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }}" >> .env
          echo "SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }}" >> .env
          echo "SPOTIFY_REFRESH_TOKEN=${{ secrets.SPOTIFY_REFRESH_TOKEN }}" >> .env

      - name: Verify .env file exists
        run: cat .env

      - name: Refresh API Token
        id: refresh_token
        run: |
          # Use curl to get a new access token from the refresh token
          response=$(curl -s -X POST "https://accounts.spotify.com/api/token" \
            -H "Authorization: Basic $(echo -n "${{ secrets.SPOTIFY_CLIENT_ID }}:${{ secrets.SPOTIFY_CLIENT_SECRET }}" | base64)" \
            -d "grant_type=refresh_token&refresh_token=${{ secrets.SPOTIFY_REFRESH_TOKEN }}")
          
          # Extract the new access token
          access_token=$(echo "$response" | jq -r '.access_token')

          if [ "$access_token" == "null" ]; then
            echo "Error: Failed to refresh access token."
            exit 1
          fi

          echo "Access Token: $access_token"
          echo "SPOTIFY_ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform Configuration
        run: terraform apply -auto-approve
        env:
          TF_VAR_api_key: ${{ env.SPOTIFY_ACCESS_TOKEN }}
